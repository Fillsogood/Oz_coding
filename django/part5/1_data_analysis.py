# -*- coding: utf-8 -*-
"""1.data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KQ1qZoKXNC-_gWAUi9l0nk_lv4baO89i

## 1.Numpy

- 파이썬에서 수학적인 계산(행렬, 백터, 차원)을 편하게 할 수 있도록 돕는 라이브러리
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install numpy

import numpy as np

# 1차원 배역
arr1 = np.array([1,2,3])

arr1
type(arr1)
arr1.shape # 3행 1열
arr1.ndim # 1차원 데이터

# 2차원 배열
arr2 = np.array([[1,2,3],[1,2,3]])
arr2
type(arr2)
arr2.shape # 2행 3열 행렬
arr2.ndim # 2차원

# ndarray 데이터 타입
arr3 = ['1','2','3']
arr3 = np.array(arr3)
arr3 = arr3.astype(np.int64)
arr3.dtype

# ndarray 생성
arr = np.arange(10)
arr>5 # boolean indexing
# arr[arr>5]

arr[[False, False, False, False, False, False,  True,  True,  True,
        True]]

np.zeros((3,2))
np.ones((3,2))
np.ones((10,10))

#reshape -> 차원을 변경
arr = np.arange(10)

arr.reshape(2,5)

# indexing & slicing
arr[0]
arr[:]

# numpy 몇 가지

# Q1. 2차원 배열에서 행렬의 각 행의 평균을 계산하는 코드를 작성하세요.
# np.mean()

arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
arr.shape

print(arr)
# axis=0(열) ,axis=1(행), axis=2(채널)
np.mean(arr, axis=1)

# Q2. 1차원 배열에서 짝수 인덱스의 값을 출력하는 코드를 작성하세요.
arr = np.array([1,2,3,4,5,6])

even_indexes = np.arange(0,arr.size,2)
print(arr[even_indexes])

#Q3. 2차원 배열의 주 대각선 상에 있는 원소들을 출력하는 코드를 작성하세요.

# diag()
arr = np.array([[1,2,3], [4,5,6], [7,8,9]])

arr.shape
# (3, 3)

#diag
np.diag(arr)

#Q4. 2차원 배열에서 각 열의 표준편차를 계산하는 코드를 작성하세요.
# 표준 편차 - > np.std()
arr = np.array([[1,2,3], [4,5,6], [7,8,9]])
np.std(arr)

print(arr)

np.std(arr, axis=0)

# Q5. 2차원 배열에서 각 행의 최댓값과 그 인덱스를 출력하는 코드를 작성하세요.
# amax()
arr = np.array([[1,2,3], [4,5,6] ,[7,8,9]])
print(arr)

np.amax(arr,axis=1)

#Q6. 1차원 배열에서 중앙값(median)을 계산하는 코드를 작성하세요.
# median()
arr = np.array([1,2,3,4,5])

np.median(arr)

#Q7. 1차원 배열에서 원소의 값이 5 이상인 것들만 출력하는 코드를 작성하세요.
# Boolean Indexing
arr = np.array([1,4,6,3,9,2,7,8])


arr[arr>=5]

#Q8. 1차원 배열에서 원소의 값이 3 또는 5인 것들의 인덱스를 출력하는 코드를 작성하세요.
# where()
arr = np.array([1,3,5,2,4,6,3,5,7])

np.where((arr == 3) | (arr == 5))

"""## 2.pandas

"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install pandas

import pandas as pd

# Series
data = ['a','b','c','d','e']

se = pd.Series(data)

type(se)

se.index
se.values

se[0:3]

se.name = "alphabet"
se.index.name = 'index'
print(se)

# DF (DataFrame = Excel)
data = {
    "country": ["kor","usa","china","japan"],
    "rank":[1,2,3,4],
    "grade":["A","B","C","D"]
}

df = pd.DataFrame(data) # csv to json, ison to csv , xlsx

df

# 데이터 셀랙션 -> 데이터를 불러오는 방업
# (1) df.컬럼, df['컬럼']

df.grade
df[['country','rank','grade']]

# (2) df.loc[인덱스값, 컬럼명] raw(행) 데이터
df.loc[3]
df.loc[:]
df.loc[:,['grade','country']]
df.loc[df['rank'] > 2]

# 삭제하는 방법 (drop)
# (1)  단순하게 행 데이터를 삭제하는 방법
# inplace=True 지우는걸 허락
df.drop([3], inplace=True)

# (2) 컬럼을 삭제

df = df.drop('rank', axis =1)
df

df['rank'] = [1,2,3]
df

# 기술통계

df.info()
df.describe()

# 데이터 정렬 - > sort_index or sort_values()
df['new_rank']=[10,100,30]

df.sort_values(by='new_rank',ascending=False) #내림차순

# null 데이터(NaN) 처리
# isnull() -> 데이터의 null 여부
# fillna() -> null 데이터를 채워주세요
# dropna() -> null 데이터를 지워주세요
import numpy as np
df.loc[1,'grade'] = np.nan
df.isnull().sum()
df['grade'] = np.nan
df.fillna(value='pass',inplace=True)

df.loc[1, 'grade'] =np.nan

df.dropna(how='any')

import pandas as pd

json_data = {
  "columns": ["Movie", "Release Year", "Audience", "Rating"],
  "index": [0, 1, 2, 3, 4, 5, 6, 7],
  "data": [
    ["Avengers", 2012, 1500, 8.8],
    ["Interstellar", 2014, 1100, 9.1],
    ["Frozen", 2013, 1020, 8.5],
    ["About Time", 2013, 950, 8.7],
    ["The Dark Knight", 2008, 1300, 9.0],
    ["Inception", 2010, 1200, 8.8],
    ["La La Land", 2016, 800, 8.6],
    ["Toy Story", 2010, 980, 8.5]
  ]
}

# JSON 데이터를 DataFrame으로 변환
df = pd.DataFrame(json_data['data'], columns=json_data['columns'])
df

### 1) 전체 데이터 중에서 ''Moive 정보만 출력하시오.
df.Movie

### 2) 전체 데이터 중에서 'Movie','Rating' 정보를 출력하시오.
df[['Movie','Rating']]

### 3) 2013년 이후에 개봉한 영화 데이터 중에서 'Movie','Rating' 정보를 출력하시오.
df[df['Release Year'] > 2013][["Movie","Rating"]]

### 4) 주어진 계산식을 참고하여 'Recommend' Column을 추가하시오.
# Recommend = (Audience * Rating) // 100

df['Recommend']= df['Audience']*df['Rating']//100
df.sort_values(by='Recommend',ascending=False).head(5)

### 5) 전체 데이터를 'Release Year' 기준 내림차순으로 출력하시오
df.sort_values(by='Recommend',ascending=False).head(5)

"""## Matplotib"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install matplotlib

import matplotlib.pyplot as plt
plt.plot([1,2,3,4])

x= np.arange(0,12,1)
y= np.sin(x)
y2= np.cos(x)

plt.plot(x,y, label = "sin",marker='o')
plt.plot(x,y2 , label = "cos",marker='x')
plt.legend(loc=(1,0.1))

plt.title("sin graph")
plt.xlabel("Time")
plt.ylabel("Amplitude")
plt.grid()

plt.xlim(0,np.pi)
plt.ylim(-1,1)